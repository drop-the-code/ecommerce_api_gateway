// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductCRUDClient is the client API for ProductCRUD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductCRUDClient interface {
	SelectAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Products, error)
	SelectByID(ctx context.Context, in *ProductID, opts ...grpc.CallOption) (*Product, error)
	Insert(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Empty, error)
	Update(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Empty, error)
	Delete(ctx context.Context, in *ProductID, opts ...grpc.CallOption) (*Empty, error)
}

type productCRUDClient struct {
	cc grpc.ClientConnInterface
}

func NewProductCRUDClient(cc grpc.ClientConnInterface) ProductCRUDClient {
	return &productCRUDClient{cc}
}

func (c *productCRUDClient) SelectAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Products, error) {
	out := new(Products)
	err := c.cc.Invoke(ctx, "/EcommerceProduct.ProductCRUD/SelectAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCRUDClient) SelectByID(ctx context.Context, in *ProductID, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/EcommerceProduct.ProductCRUD/SelectByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCRUDClient) Insert(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/EcommerceProduct.ProductCRUD/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCRUDClient) Update(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/EcommerceProduct.ProductCRUD/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCRUDClient) Delete(ctx context.Context, in *ProductID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/EcommerceProduct.ProductCRUD/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductCRUDServer is the server API for ProductCRUD service.
// All implementations must embed UnimplementedProductCRUDServer
// for forward compatibility
type ProductCRUDServer interface {
	SelectAll(context.Context, *Empty) (*Products, error)
	SelectByID(context.Context, *ProductID) (*Product, error)
	Insert(context.Context, *Product) (*Empty, error)
	Update(context.Context, *Product) (*Empty, error)
	Delete(context.Context, *ProductID) (*Empty, error)
	mustEmbedUnimplementedProductCRUDServer()
}

// UnimplementedProductCRUDServer must be embedded to have forward compatible implementations.
type UnimplementedProductCRUDServer struct {
}

func (UnimplementedProductCRUDServer) SelectAll(context.Context, *Empty) (*Products, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectAll not implemented")
}
func (UnimplementedProductCRUDServer) SelectByID(context.Context, *ProductID) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectByID not implemented")
}
func (UnimplementedProductCRUDServer) Insert(context.Context, *Product) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedProductCRUDServer) Update(context.Context, *Product) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProductCRUDServer) Delete(context.Context, *ProductID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedProductCRUDServer) mustEmbedUnimplementedProductCRUDServer() {}

// UnsafeProductCRUDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductCRUDServer will
// result in compilation errors.
type UnsafeProductCRUDServer interface {
	mustEmbedUnimplementedProductCRUDServer()
}

func RegisterProductCRUDServer(s grpc.ServiceRegistrar, srv ProductCRUDServer) {
	s.RegisterService(&ProductCRUD_ServiceDesc, srv)
}

func _ProductCRUD_SelectAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCRUDServer).SelectAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EcommerceProduct.ProductCRUD/SelectAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCRUDServer).SelectAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCRUD_SelectByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCRUDServer).SelectByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EcommerceProduct.ProductCRUD/SelectByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCRUDServer).SelectByID(ctx, req.(*ProductID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCRUD_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCRUDServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EcommerceProduct.ProductCRUD/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCRUDServer).Insert(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCRUD_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCRUDServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EcommerceProduct.ProductCRUD/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCRUDServer).Update(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCRUD_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCRUDServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EcommerceProduct.ProductCRUD/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCRUDServer).Delete(ctx, req.(*ProductID))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductCRUD_ServiceDesc is the grpc.ServiceDesc for ProductCRUD service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductCRUD_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EcommerceProduct.ProductCRUD",
	HandlerType: (*ProductCRUDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SelectAll",
			Handler:    _ProductCRUD_SelectAll_Handler,
		},
		{
			MethodName: "SelectByID",
			Handler:    _ProductCRUD_SelectByID_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _ProductCRUD_Insert_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProductCRUD_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ProductCRUD_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/ProductCRUD.proto",
}
